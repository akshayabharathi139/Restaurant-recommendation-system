# -*- coding: utf-8 -*-
"""restaurent_recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hpaqugWr0Sgj3VCBOv2h9VcRcJI5nDty
"""

import pandas as pd

# Load the uploaded dataset
file_path = "C:\\Cognifyz Technologies\\Tasks\\task 2 - restaurent recomendation\\Dataset .csv"
df = pd.read_csv(file_path)

# Display basic information
df.info()

# Display the first few rows
df.head()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity

# Step 1: Preprocessing
print("now Pre processing")

# Fill missing cuisines with a placeholder
df['Cuisines'] = df['Cuisines'].fillna('Unknown')

# Create a simplified dataframe for recommendations
data = df[['Restaurant Name', 'Cuisines', 'Average Cost for two', 'Price range', 'Aggregate rating']].copy()

# Step 2: Encode the 'Cuisines' column using TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(data['Cuisines'])

# Step 3: Normalize numerical features
scaler = MinMaxScaler()
numerical_features = scaler.fit_transform(data[['Average Cost for two', 'Price range', 'Aggregate rating']])

# Combine cuisine vectors with normalized numerical features
import numpy as np
combined_features = np.hstack([tfidf_matrix.toarray(), numerical_features])

# Step 4: Define a function for recommendation
def recommend_restaurants(cuisine_pref, min_cost, max_cost, min_rating, top_n=5):
    # Create a dummy restaurant profile
    dummy = pd.DataFrame({
        'Cuisines': [cuisine_pref],
        'Average Cost for two': [(min_cost + max_cost) / 2],
        'Price range': [2],  # Assume mid-range by default
        'Aggregate rating': [min_rating]
    })

    # TF-IDF for the input cuisine
    dummy_tfidf = tfidf.transform(dummy['Cuisines'])

    # Normalize dummy numerical values
    dummy_scaled = scaler.transform(dummy[['Average Cost for two', 'Price range', 'Aggregate rating']])

    # Combine dummy features
    dummy_combined = np.hstack([dummy_tfidf.toarray(), dummy_scaled])

    # Compute cosine similarity
    similarity_scores = cosine_similarity(dummy_combined, combined_features).flatten()

    # Get top N indices
    top_indices = similarity_scores.argsort()[-top_n:][::-1]

    # Return recommended restaurant names with scores
    return df.loc[top_indices, ['Restaurant Name', 'Cuisines', 'Average Cost for two', 'Aggregate rating']].assign(Similarity=similarity_scores[top_indices])

cuisine_input = input("Enter preferred cuisine (e.g., Italian): ")
min_cost_input = int(input("Enter minimum cost: "))
max_cost_input = int(input("Enter maximum cost: "))
min_rating_input = float(input("Enter minimum rating (e.g., 4.0): "))

# Example test input: Italian cuisine, budget 500â€“1000, min rating 4.0
print("now recommending.....")
recommendations = recommend_restaurants(cuisine_input, min_cost_input, max_cost_input, min_rating_input)
print("\nTop Recommended Restaurants:")
print(recommendations.to_string(index=False))

# List of available cuisines
'''available_cuisines = [
    "Afghan", "African", "American", "Andhra", "Arabian", "Argentine", "Asian", "Assamese", "Awadhi", "BBQ",
    "Bakery", "Bar Food", "Belgian", "Beverages", "Bihari", "Biryani", "Brazilian", "British", "Bubble Tea", "Burmese",
    "Cafe", "Cantonese", "Charcoal Chicken", "Chettinad", "Chinese", "Coffee", "Continental", "Cuban", "Desserts", "European",
    "Fast Food", "Finger Food", "French", "German", "Goan", "Greek", "Grill", "Gujarati", "Healthy Food", "Hyderabadi",
    "Ice Cream", "Indian", "Indonesian", "Iranian", "Italian", "Japanese", "Juices", "Kebab", "Kerala", "Korean",
    "Lebanese", "Lucknowi", "Maharashtrian", "Malaysian", "Malwani", "Mangalorean", "Mediterranean", "Mexican", "Middle Eastern", "Mithai",
    "Modern Indian", "Mughlai", "Naga", "Nepalese", "North Eastern", "North Indian", "Oriya", "Parsi", "Pizza", "Portuguese",
    "Punjabi", "Rajasthani", "Rolls", "Russian", "Salad", "Sandwich", "Seafood", "Sichuan", "Singaporean", "South American",
    "South Indian", "Sri Lankan", "Steak", "Street Food", "Sushi", "Tea", "Thai", "Tibetan", "Turkish", "Vietnamese"
]

# Display numbered list
print("\nChoose a preferred cuisine from the list:")
for i, cuisine in enumerate(available_cuisines, start=1):
    print(f"{i}. {cuisine}")

# Get user input by number
choice = int(input("\nEnter the number of your preferred cuisine: "))
cuisine_input = available_cuisines[choice - 1]
print(f"You selected: {cuisine_input}")
'''

